[project]
name = "pyblog"
version = "0.1.0"
description = "Python-Based (Django) Blog Engine"
authors = [{ name = "Grant Ramsay", email = "seapagan@gmail.com>" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "dj-hitcount>=1.3.0",
  "django>=5.1.2",
  "django-compressor>=4.5.1",
  "django-gravatar2>=1.4.5",
  "django-maintenance-mode>=0.21.1",
  "django-recaptcha>=4.0.0",
  "django-rundevserver>=0.3.1",
  "django-secretballot>=2.0.0",
  "django-user-sessions>=2.0.0",
  "django-xforwardedfor-middleware>=2.0",
  "djangorestframework>=3.15.2",
  "geoip2>=4.8.0",
  "gunicorn>=23.0.0",
  "pillow>=10.4.0",
  "psycopg2>=2.9.9",
  "python-dotenv>=1.0.1",
  "requests>=2.32.3",
  "dj-pagination",
  "django-likes",
  "django-ckeditor-5>=0.2.13",
]

[project.urls]
"Pull Requests" = "https://github.com/seapagan/pyBlog/pulls"
"Bug Tracker" = "https://github.com/seapagan/pyBlog/issues"
"Changelog" = "https://github.com/seapagan/pyBlog/blob/main/CHANGELOG.md"
"Repository" = "https://github.com/seapagan/pyBlog"

[tool.uv]
dev-dependencies = [
  "faker>=30.3.0",
  "mock>=5.1.0",
  "mypy>=1.11.2",
  "poethepoet>=0.29.0",
  "pre-commit>=4.0.1",
  "pyfakefs>=5.7.0",
  "pymarkdownlnt>=0.9.24",
  "pytest>=8.3.3",
  "pytest-cov>=5.0.0",
  "pytest-django>=4.9.0",
  "pytest-mock>=3.14.0",
  "pytest-randomly>=3.15.0",
  "pytest-reverse>=1.7.0",
  "pytest-sugar>=1.0.0",
  "pytest-xdist>=3.6.1",
  "ruff>=0.6.9",
  "django-stubs>=5.1.0",
  "mkdocs>=1.6.1",
  "mkdocs-material>=9.5.39",
  "mdx-truly-sane-lists>=1.3",
  "mkdocs-minify-plugin>=0.8.0",
  "pygments>=2.18.0",
  "pymdown-extensions>=10.11.2",
]

[tool.uv.sources]
dj-pagination = { git = "https://github.com/seapagan/dj-pagination.git", branch = "master" }
django-likes = { git = "https://github.com/seapagan/django-likes.git", branch = "develop" }

# ---------------------------------- poe tasks ---------------------------------
[tool.poe.tasks]
# Run the Django development server
serve.cmd = "python manage.py runserver"
serve.help = "Run the Django development server"

# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.help = "Format code with Ruff"
format.cmd = "ruff format ."
ruff.help = "Run Ruff checks"
ruff.cmd = "ruff check ."
test.help = "Run tests using Pytest"
test.cmd = "pytest"
markdown.cmd = "pymarkdown scan  -r *.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:8000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

changelog.cmd = "github-changelog-md"
changelog.help = "Generate the CHANGELOG.md file"

# -------------------- configure assorted tools and linters --------------------
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md036.enabled = false
plugins.md046.enabled = false

[tool.pytest.ini_options]
# addopts = ["--cov", "--cov-report", "term-missing", "--cov-report", "html"]
filterwarnings = []
mock_use_standalone_module = true
pythonpath = ["blog", "pyBlog"]
DJANGO_SETTINGS_MODULE = "pyblog.settings"

[tool.coverage.run]
# source = ["blog", "pyBlog"]

[tool.ruff]
line-length = 80
extend-exclude = [
  "migrations",
  "manage.py",
  "pyblog/settings.py",
  "preferences",        # third-party app
]

src = ["blog", "pyBlog", "tests"]
target-version = "py39"           # minimum python version supported

[tool.ruff.lint]
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
  "RUF012", # this is a big pita to enforce and doubtful usageg in Django
  "ANN",    # ignoring type errors for now. Django is a big PITA for this.
] # These rules are too strict even for us üòù
extend-ignore = ["COM812", "ISC001"] # these are ignored for ruff formatting

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files.
]

[tool.ruff.lint.isort]
known-first-party = ["blog", "pyblog", "users"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.9"
exclude = [
  "blog/migrations/",
  "manage.py",
  "pyblog/settings.py",
  "preferences/",
]
plugins = ["mypy_django_plugin.main"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[tool.django-stubs]
django_settings_module = "pyblog.settings"
